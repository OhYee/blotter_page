{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { request } from '@/utils/request';\nexport const posts = async (params, callback) => {\n  return await request('get', '/api/posts', params, callback);\n};\nexport const indexPosts = async (search, search_fields, page, size, with_tags, without_tags, callback) => {\n  return await posts({\n    search,\n    search_fields: search_fields.join(','),\n    offset: (page - 1) * size,\n    number: size,\n    with_tags: with_tags.map(item => item.id).join(','),\n    without_tags: without_tags.map(item => item.id).join(',')\n  }, callback);\n};\nexport const archives = async (page, size, callback) => {\n  return await posts({\n    offset: (page - 1) * size,\n    number: size\n  }, callback);\n};\nexport const tagPosts = async (tag, page, size, callback) => {\n  return request('get', '/api/tag', {\n    tag,\n    offset: (page - 1) * size,\n    number: size\n  }, callback);\n};\nexport const adminPosts = async (search, search_fields, page, size, field, up, with_tags, without_tags, callback) => {\n  return await request('get', '/api/admin/posts', {\n    offset: (page - 1) * size,\n    number: size,\n    sort_field: field,\n    sort_type: up ? 1 : -1,\n    search: search,\n    search_fields: search_fields.join(','),\n    with_tags: with_tags.map(item => item.id).join(','),\n    without_tags: without_tags.map(item => item.id).join(',')\n  }, callback);\n};\nexport const friends = async callback => {\n  return await request('get', '/api/friends', {}, callback);\n};\nexport const layout = async (callback) => {\n  return await request('get', '/api/layout', {}, callback);\n};\nexport const tags = async (callback) => {\n  return await request('get', '/api/tags', {}, callback);\n};\nexport const post = async (url, callback) => {\n  return await request('get', '/api/post', {\n    url\n  }, callback);\n};\nexport const adminPost = async (url, callback) => {\n  return await request('get', '/api/admin/post', {\n    url\n  }, callback);\n};\nexport const postEgg = async (word, callback) => {\n  return await request('get', '/api/eggs', {\n    word\n  }, callback);\n};\nexport const comments = async (url, callback) => {\n  return await request('get', '/api/comments', {\n    url\n  }, callback);\n};\nexport const avatar = async (email, callback) => {\n  // avatar 如果获取失败，不提醒错误\n  return await request('get', '/api/avatar', {\n    email\n  }, callback, true);\n};\nexport const addComment = async (args, callback) => {\n  return await request('post', '/api/comment/add', args, callback);\n};\nexport const markdown = async (source, callback) => {\n  return await request('post', '/api/markdown', {\n    source\n  }, callback);\n};\nexport const tagsSearch = async (keyword, callback) => {\n  return await request('get', '/api/tags', {\n    keyword,\n    number: 10,\n    offset: 0\n  }, callback);\n};\nexport const login = async (username, password, callback) => {\n  return await request('get', '/api/login', {\n    username,\n    password\n  }, callback);\n};\nexport const logout = async callback => {\n  return await request('get', '/api/logout', {}, callback);\n};\nexport const info = async (username, callback) => {\n  return await request('get', '/api/info', {\n    username\n  }, callback);\n};\nexport const postExist = async (url, callback) => {\n  return await request('get', '/api/post/existed', {\n    url\n  }, callback);\n};\nexport const postEdit = async (post, callback) => {\n  return await request('post', '/api/admin/post/edit', _objectSpread(_objectSpread({}, post), {}, {\n    tags: post.tags.map(tag => tag.id)\n  }), callback);\n};\nexport const postDelete = async (id, callback) => {\n  return await request('get', '/api/admin/post/delete', {\n    id\n  }, callback);\n};\nexport const adminTags = async (keyword, page, number, sort_field, sort_inc, callback) => {\n  return await request('get', '/api/tags', {\n    keyword,\n    number: number,\n    offset: (page - 1) * number,\n    sort_field,\n    sort_inc,\n    all: true\n  }, callback);\n};\nexport const tagEdit = async (id, name, short, color, icon, description, hide, callback) => {\n  return await request('get', '/api/admin/tag/edit', {\n    id,\n    name,\n    short,\n    color,\n    icon,\n    description,\n    hide\n  }, callback);\n};\nexport const tagDelete = async (id, callback) => {\n  return await request('get', '/api/admin/tag/delete', {\n    id\n  }, callback);\n};\nexport const tagExisted = async (id, short, callback) => {\n  return await request('get', '/api/tag/existed', {\n    id,\n    short\n  }, callback);\n};\nexport const friendsSet = async (friends, callback) => {\n  return await request('post', '/api/admin/friends/set', {\n    friends\n  }, callback);\n};\nexport const friendsSpider = async callback => {\n  return await request('get', '/api/admin/friends/spider', {}, callback);\n};\nexport const view = async (url, callback) => {\n  return await request('get', '/api/view', {\n    url\n  }, callback, true);\n};\nexport const menus = async callback => {\n  return await request('get', '/api/menus', {}, callback);\n};\nexport const menusSet = async (menus, callback) => {\n  return await request('post', '/api/admin/menus/set', {\n    menus\n  }, callback);\n};\nexport const githubUser = async (username, callback) => {\n  return await request('get', `https://api.github.com/users/${username}`, {}, callback);\n};\nexport const githubRepos = async (username, callback) => {\n  return await request('get', `/api/github/repos`, {\n    username\n  }, callback);\n};\nexport const githubRepo = async (username, repo, callback) => {\n  return await request('get', `https://api.github.com/repos/${username}/${repo}`, {}, callback);\n};\nexport const about = async (callback) => {\n  return await request('get', `/api/about`, {}, callback);\n};\nexport const variables = async callback => {\n  return await request('get', `/api/admin/variables`, {}, callback);\n};\nexport const variablesSet = async (data, callback) => {\n  return await request('post', `/api/admin/variables/set`, {\n    data\n  }, callback);\n};\nexport const commentsAdmin = async (page, size, callback) => {\n  return await request('get', `/api/admin/comments`, {\n    number: size,\n    offset: (page - 1) * size\n  }, callback);\n};\nexport const commentSet = async (id, ad, recv, show, callback) => {\n  return await request('get', `/api/admin/comment/set`, {\n    id,\n    ad,\n    recv,\n    show\n  }, callback);\n};\nexport const commentDelete = async (id, callback) => {\n  return await request('get', `/api/admin/comment/delete`, {\n    id\n  }, callback);\n};\nexport const commentsAvatar = async (callback) => {\n  return await request('get', `/api/admin/comments/avatar`, {}, callback);\n};\nexport const userSet = async (username, email, avatar, ns_id, ns_name, ac_name, ac_island, qq, password, callback) => {\n  return await request('get', `/api/user/set`, {\n    username,\n    email,\n    avatar,\n    ns_id,\n    ns_name,\n    ac_name,\n    ac_island,\n    qq,\n    password\n  }, callback);\n};\nexport const checkUsername = async (username, callback) => {\n  return await request('get', `/api/user/username`, {\n    username\n  }, callback);\n};\nexport const register = async (username, password, callback) => {\n  return await request('get', `/api/user/register`, {\n    username,\n    password\n  }, callback);\n};\nexport const users = async (page, size, search, sort_field, sort_type, callback) => {\n  return await request('get', '/api/users', {\n    offset: (page - 1) * size,\n    number: size,\n    search,\n    sort_type,\n    sort_field\n  }, callback);\n};\nexport const reset_password = async (id, callback) => {\n  return await request('get', '/api/admin/user/reset_password', {\n    id\n  }, callback);\n};\nexport const travels_get = async (callback) => {\n  return await request('get', '/api/travels', {}, callback);\n};\nexport const travels_set = async (travels, callback) => {\n  return await request('post', '/api/travels/set', {\n    travels\n  }, callback);\n};\nexport const travels_get_url = async (url, callback) => {\n  return await request('get', '/api/travels/url', {\n    url\n  }, callback);\n};\nexport const qiniu_get_buckets = async (callback) => {\n  return await request('get', '/api/qiniu/buckets', {}, callback);\n};\nexport const qiniu_get_images = async (bucket, prefix, marker, number, callback) => {\n  return await request('get', '/api/qiniu/images', {\n    bucket,\n    prefix,\n    marker,\n    number\n  }, callback);\n};\nexport const qiniu_get_token = async (bucket, callback) => {\n  return await request('get', '/api/qiniu/token', {\n    bucket\n  }, callback);\n};\nexport const qiniu_delete_image = async (bucket, key, callback) => {\n  return await request('get', '/api/qiniu/image/delete', {\n    bucket,\n    key\n  }, callback);\n};\nexport const qiniu_rename_image = async (bucket, key, new_key, callback) => {\n  return await request('get', '/api/qiniu/image/rename', {\n    bucket,\n    key,\n    new_key\n  }, callback);\n};\nexport const version = async callback => {\n  return await request('get', '/api/version', {}, callback);\n};","map":null,"metadata":{},"sourceType":"module"}